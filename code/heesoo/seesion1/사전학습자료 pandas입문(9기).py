#!/usr/bin/env python
# coding: utf-8

# # Pandas란?
# - 데이터 분석에 특화된 파이썬 라이브러리
# - 행과 열로 이루어진 데이터 객체를 만들어 다룰 수 있게 되며, 보다 안정적으로 대용량의 데이터들을 처리하는데 매우 편리한 도구
# - Numpy의 확장판으로, `Numpy 기능` + `구조화 된 데이터 처리 기능`을 보유함

# ## Pandas의 주요 데이터 구조
# 
# <img src = 'https://dandyrilla.github.io/images/2017-08-12/fig0.png'>
# 
# |이름|차원|설명|
# |:-----------:|:-----------:|:-----------:|
# |Series|1차원|균일한 유형의 배열로 표시된 1차원 데이터|
# |DataFrame|2차원|인덱스가 같은 하나 이상의 Series가 모여진 2차원 표 형식의 데이터|
# 
# > Pandas의 핵심은 DataFrame!

# # DataFrame 생성

# ## 라이브러리 불러오기

# In[1]:


import pandas as pd


# ## 데이터프레임 만들기 

# In[2]:


# 괄호 안에서 Shift + Tab을 눌러보세요!
pd.DataFrame()


# **DataFrame의 속성값**
# ```python
# pd.DataFrame(data = None, index = None, columns = None, dtype = None, copy = False)
# ```
# - data : DataFrame을 생성할 데이터
# - index : index에 대한 정보, 미입력시 0부터 순차적으로 부여 (Optional)
# - columns : 열에 대한 이름값, 미입력시 0부터 순차적으로 부여 (Optional)
# - dtype : 각 column의 데이터 타입 명시, 미입력시 자체적으로 판단 (Optional)

# ##### 2차원 리스트로 데이터프레임 만들기

# In[3]:


lst = [['민지', 15, '커뮤', 'AI', '회장'], ['다니엘', 16, '경영', '심리', '교육팀장'],
       ['하니', 17, '경영', '빅사', '교육팀원'], ['해린', 19, '경영', '빅사', '교육팀원'],
       ['혜인', 16, '경제', '빅사', '교육팀원']]

df = pd.DataFrame(lst, columns=['이름', '학번', '전공', '복수전공', '역할'])
df = df.set_index('이름')

df


# ##### 사전으로 데이터프레임 만들기

# In[4]:


dic = {
    '이름': ['민지', '다니엘', '하니', '해린', '혜인'],
    '학번': [15, 16, 17, 19, 16],
    '전공': ['커뮤', '경영', '경영', '경영', '경제'],
    '복수전공': ['AI', '심리', '빅사', '빅사', '빅사'],
    '역할': ['회장', '교육팀장', '교육팀원', '교육팀원', '교육팀원']
}

df2 = pd.DataFrame(dic)
df2 = df2.set_index('이름')

df2


# ## 데이터프레임 타입 확인 

# In[5]:


type(df)


# In[6]:


# 컬럼별 데이터 타입 확인
# 각 컬럼은 다양한 데이터 타입으로 구성되며, 같은 컬럼의 데이터 타입은 동일하다
df.dtypes


# # DataFrame 접근

# ## head, tail로 접근하기

# - `head(개수)` : 위에서부터 개수만큼의 데이터 출력
# - `tail(개수)` : 밑에서부터 개수만큼의 데이터 출력

# In[7]:


df.head(3)


# In[8]:


df.tail() #개수를 쓰지 않을 경우 5개만 출력


# ## 행명, 열명으로 접근하기: loc
# : `df.loc['행명', '열명']`
# 
# 행: row / 열: column
# 
# |접근 방법|사용 방법|
# |:--------------------------:|:-----------:|
# |행명|`df.loc["row4"]`|
# |행명 리스트|`df.loc[["row3", "row4", "row5"]]`|
# |행명 슬라이싱|`df["row3" : "row5"]`|
# |열명|`df.loc[ : , "col1"]`|`df["col1"]`|
# |열명 리스트|`df.loc[ : , ["col3", "col4", "col5"]` or `df[["col3", "col4", "col5"]]`|
# |열명 슬라이싱|`df.loc[ : , ["col3" : "col5"]`|

# ##### 값 1개 인덱싱

# In[9]:


df.loc['다니엘', '역할']


# In[10]:


df[['전공']]


# ##### 한 줄 인덱싱
# - 하나의 index만 조회 할 경우 Series Type으로 출력

# In[11]:


# 행명으로 접근하기
# 컬럼 전체를 지정한다는 의미로 : 를 입력함
df.loc['해린', : ]  # df.loc['해린']


# In[12]:


# 열명으로 접근하기
df.loc[ : , '전공']  #df['전공']  #df.전공


# ##### 여러 줄 인덱싱
# - 여러 index를 조회 할 경우 DataFrame Type으로 출력

# In[14]:


df.loc[['해린', '혜인'], : ]  #df.loc[['해린', '혜인']]


# In[15]:


df.loc[ : , ['전공', '복수전공']]  #df[['전공', '복수전공']]


# ##### 슬라이싱

# In[16]:


df.loc['하니' : '혜인', : ]  #df.loc['하니' : '혜인']  #df['하니' : '혜인']


# In[17]:


df.loc[:, '학번' : '복수전공']


# ## 위치 번호로 접근하기: iloc
# : `df.iloc['행번호', '열번호']`

# |접근 방법|사용 방법|
# |:--------------------------:|:-----------:|
# |행 위치|`df.iloc[2]`|
# |행 위치 리스트|`df.iloc[[2, 6, 4]]`|
# |행 위치 슬라이싱|`df.iloc[2:5]` or `df[2:5]`|
# |열 위치|`df.iloc[ : , 3]`|
# |열 위치 리스트|`df.iloc[ : , [3, 2, 5]]`|
# |열 위치 슬라이싱|`df.iloc[ : , 3:5]`|

# In[18]:


df


# ##### 0번 row, 3번 column에 해당하는 값 출력

# In[19]:


df.iloc[0, 3]


# ##### 1번과 3번 row, 1번과 2번 column에 해당하는 데이터 출력

# In[20]:


df.iloc[[1, 3], [1, 2]]


# ##### 2번 ~ 마지막 row, 0번 ~ 2번 col에 해당하는 데이터 출력

# In[21]:


# 연속된 데이터 출력 --> 슬라이싱 활용

df.iloc[2:, 0:3]


# ## 과제 12
# 12. 레드벨벳 멤버의 데이터프레임(df)에서 연속된 여러 줄을 찾는 과제입니다.<br/>
#     '다니엘'부터 '혜인'까지의 '학번'과 '역할'만을 확인할 수 있도록 출력해보세요! <br/>
#     (인덱싱과 슬라이싱 모두 사용)

# In[1]:


import pandas as pd

lst = [['민지', 15, '커뮤', 'AI', '회장'], ['다니엘', 16, '경영', '심리', '교육팀장'],
       ['하니', 17, '경영', '빅사', '교육팀원'], ['해린', 19, '경영', '빅사', '교육팀원'],
       ['혜인', 16, '경제', '빅사', '교육팀원']]

df = pd.DataFrame(lst, columns=['이름', '학번', '전공', '복수전공', '역할'])
df = df.set_index('이름')
df


# In[3]:


import pandas as pd

lst = [['민지', 15, '커뮤', 'AI', '회장'], ['다니엘', 16, '경영', '심리', '교육팀장'],
       ['하니', 17, '경영', '빅사', '교육팀원'], ['해린', 19, '경영', '빅사', '교육팀원'],
       ['혜인', 16, '경제', '빅사', '교육팀원']]

df = pd.DataFrame(lst,columns=['이름', '학번', '전공', '복수전공', '역할'])
df = df.set_index('이름')
df

df.iloc[1:, [0,3]]


# # DataFrame 수정/추가/삭제

# ## 수정

# ##### 값 1개 수정

# In[23]:


df_new = df.copy()
df_new.loc['민지', '역할']


# In[24]:


df_new.loc['민지', '역할'] = '인싸'
df_new


# ###### 한 줄 수정

# In[25]:


df_new.loc['민지'] = [21, '아텍', '컴공', '인싸이더']
df_new


# In[26]:


# 역할 column의 모든 값을 동일하게 바꾸기
df_new.loc[ : , '역할'] = '5기'
df_new


# ###### 여러 줄 수정

# In[27]:


df_new.loc[['민지', '다니엘']] = "-"
df_new


# In[28]:


df_new[['복수전공', '역할']] = "?"
df_new


# ##### 위치 번호로 값 수정

# In[29]:


df_new.iloc[[0, 1], [2, 3]] = "#"
df_new


# ## 추가
# 

# In[30]:


df_new2 = df.copy()


# ###### row 추가

# In[31]:


# 없는 인덱스명으로 데이터를 넣으면, 새로운 row가 추가됨
df_new2.loc['아이유'] = [19, '수학', '-', '부회장']
df_new2


# ###### column 추가

# In[32]:


df_new2['기수'] = '100기'
df_new2


# ## 삭제
# 행 방향 axis=0 <br/>
# 열 방향 axis=1

# In[33]:


df_new2.drop('아이유', axis = 0, inplace = True)  #inplace = False --> 기존의 df에 영향 X
df_new2


# In[34]:


df_new2.drop(['복수전공', '기수'], axis = 1, inplace = True)
df_new2


# In[35]:


del df_new2['역할']
df_new2


# ## 과제 13
# 13. df_new3에 본인 포함 2명의 정보를 추가하고(행), 새로운 열을 만들어보자!

# In[4]:


Ist= [['민지',15,'커뮤','AI','회장'],['다니엘',16,'경영','심리','교육팀장'], ['하니',17,'경영','빅사','교육팀원'], ['해린',19,'경영','빅사', '교육팀원'], ['해인', 16, '경제', '빅사', '교육팀원']]

df = pd.DataFrame(Ist,columns=['이름', '학번', '전공', '복수전공', '역할'])
df = df.set_index('이름')
df_new3 = df.copy()
df_new3

df_new3.loc['정희수'] = [21, '심리', '빅사', '신입부원']
df_new3.loc['홍길동'] = [22, '컴공', '빅사', '신입부원']
df_new3['기수']= '9기'
df_new3


# In[ ]:




